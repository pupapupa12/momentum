;; 세미콜론 2개 주석은 선생님 코멘트 필기

> 2.0 Your First JS Project

브라우저 - 'html'형식 파일 열기 (css/js 열려도 원하는 효과 사용X)
html에 두개의 엔진이 돌아감(현재는 css+js)

js -> function 사용 (ex.alret...)

;  ----------------------------------------

> 2.1 Basic Data Types

데이터타입 (value 값)
    1. integer - full number(정수) / ex.1,2,3..
    2. float - 소수 / ex.1.5
    3. string "" -> 큰 따옴표 안의 text
    ;; 4. null

;  ----------------------------------------

> 2.2 Variable

'console.log()' -> ()괄호 안에 들어가는 것을 프린트/출력(=log)하여 콘솔에 나타냄
    --> ()안에 데이터타입 기입 가능
        --> 단일 한가지의 타입만 기입 가능

* variable (var) = 값을 저장하거나 유지하는 역할
* constant (const) = 상수 / 바뀌지 않는 값
    -> var을 사용하기 위해 const를 사용해야함
    --> const > var한 값 (의미 작성)
    ---> const => syntax

Javascript => 카멜표기명

;  ----------------------------------------

> 2.3 const and let

variable을 쓸수 있는 2가지 방법
    1. const : 변할 수 없음
    2. let : 변할 수 있음
        -> 하단에 재지정 가능 (코드는 위에서부터 아래로 읽히면서 적용됨)
    3. var : 보호를 받지 못함 / 오류사항 검수 불가 (컴퓨터가 인식 x)
    ------> 'const'를 기본적으로 사용 / 'let' 필요할 떄 사용 (업데이트 해야 할 내용일 경우) / 'var' 절대 사용x

;  ----------------------------------------

> 2.4 booleans

booleans = true / false (0=off/1=on)
    ->"" 큰 따옴표 안에 작성 XXX
    -> ex. const amIFat = true; (O)
    -> ex. const amIFat = "true"; (X)

null = nothing(아무 것도 없음/비어있음)
    -> text도 아니고 null 그 자체로 씀
    -> undefined와 다름 (undefined = 값이 지정되어있지 않음을 뜻함)
    -> 자연발생적으로 발생 X

;  ----------------------------------------

> 2.5 Arrays

;; 데이터타입을 담는 데이터타입 => array도 데이터타입 중 하나

arrays 사용 규칙
    1. 시작과 끝에 []대괄호 사용
    2. 각각의 항목은 ,쉼표로 분리되어야 함
        -> 항목은 숫자,string, boolean, null 등 전부 작성 가능
    3. array 안의 데이터에 접근하려면 'console.log(variable 이름)[3]' <-얻고 싶은 항목의 번호 기입
        -> var이름 = 지정한 array 이름
        -> 컴퓨터는 숫자를 '0'부터 셈 (숫자 지정 시 '0'고려하고 작성)

array 안에 값(항목/내용)을 추가하려면 'push' 사용
    -> '지정한 array 이름.push()' <- 추가하려는 값
    -> 추가 후 하단에 console.log 한번 더 출력
        (상단의 같은 지정이름 호출해도 추가 된 값은 하단의 코드에만 적용됨)

;  ----------------------------------------

> 2.6 Objects

Objects
:같은 주제에 다른 property(=key)들을 부여하고 싶을 때 사용
:데이터 타입을 정리하는 다른 방법
;; 데이터타입을 담는 데이터타입 => object도 데이터타입 중 하나

{} 중괄호 사용
    -> 'const var이름 = {
        property1 : 값 (-> 값부여 할때 '='말고 ':'사용)
    }'

- Object를 도출할 수 있는 방법 2가지
    1. 'console.log(var이름.property);'
    2. 'console.log(var이름["property"]);'

- Object 추가/업데이트/변경 방법
    -> 'var이름.추가하고 싶은 property = value;'
        --> 값을 업데이트하거나 추가하기(+) 가능
        --> 추가하는 법
            -> 'var이름.property = var이름.property + value'

;  ----------------------------------------

> 2.7 Function part One
> 2.8 Function part Two

Function
: 반복해서 사용가능한 코드 조각
: 코드를 캡슐화해서 여러번 실행가능하게 함
'function function이름(변수){코드블럭};'
    -> '{코드블럭}' 안에 들어간 코드는 내가 function이름을 실행할 때 마다 발생
    -> '()'이 function을 실행하는 변수
    --> 하단에 출력할 수 있는 코드를 작성하여 원하는 방식으로 출력...?
    ex. alret()

1) argument로 어떤 데이터 입력
2) 해당 데이터는 var이름으로 쓰임
    -> 'function function이름(변수){코드블럭};'
        -> '(변수)' 부분에 해당됨
            ex. (nameOfPerson)
        -> 1개만 할당 될 수 있는 건 아님 => 여러개 가능
            ex. (nameOfPerson, age)

* function plus(<-function이름_임의지정)
    'function plus(a, b){코드블럭};'
    -> 2개의 argument를 가짐
    -> 작성된 순서에 따라서 a, b가 정해짐
        ex. 'function plus(a, b){
            console.log(a + b);}

            plus(8, 60);'
            => '8 = a / 60 = b' 로 지정
            ==> 이름이 뭐가 되어도 순서에 따라서 지정됨
            ===> a,b,c는 {}안에서 정의 되어야함!

* NaN = Not a Number(숫자가 아님)

;  ----------------------------------------

> 2.11 Returns

function 안에 있는 것을 return하면 하단의 const한것의 값을 실핼할 수 있음

외부에서 값을 얻어서 해결...?
return으로 밖에서 값을 받아서 사용할 수 있음
    -> return하면 그 수식(function)은 종료

;  ----------------------------------------

> 2.13 Conditionals (if / else)
> 2.14 Conditionals part Two
> 2.15 Conditionals part Three

* prompt (=> function)
: 사용자에게 창을 띄울 수 있게 해주는 함수
: 2개의 argument를 받음
    1_ message(문자) => string
    2_ default
==> prompt는 아주아주 잘 안 씀

* typeof (=> function)
'console.log(typeof var이름);'
-> 'typeof'가 사용자가 적은 value값의 정보를 알려줌
    (ex. string/integer...)

* parseInt() (=> function)
: string을 number(=integer)로 변환하는 함수
    -> parseInt한 후의 내용이 number이 아니면 'NaN'이라는 message를 띄움

* isNaN() (=> function)
: number가 아닌 경우 아니라고 알려주는 함수
: boolean 형식으로 출력 (숫자 O = false / 숫자 X = true)
    => conditional(조건문)에 넣을 수 있음

Condition
'if(condition => function){
    /// condition === ture
} else {
    /// condition === false
}'
    -> 'else'는 조건이 2개이상 일때 사용
    -> condition은 위에서부터 아래로 실행됨
    --> 'condition'은 무조건 boolean이여야함
        => true면 'if(condition)'이 실행
        => 'condition' = funtion
    * else if
    : condition을 추가할 수 있게 해줌
    : 'else' 자리에 대신 사용
    -> 조건이 3개 이상일때 사용 (여러번 사용O)
    'if(condition => function){
        /// condition === true(- 결과출력) or false(↓ 아래 조건여부 판단)
    } else if(condition) {
        /// condition === true(-) or false(↓)
    } else (<- 선택적 사용) {
        /// condition === 나머지 value(-)
    }'

~ 기호 / 부호 / 연산자 ~
    '> =' : 이상
    '< =' : 이하
    '&&' : and
        -> &&(and) 앞뒤로 있는 두개의 조건에 "모두" 충족해야함
        - true && true === true
        - false && true === false
        - true && false === false
        - false && false === true
    '||' : or
        -> ||(or) 앞뒤로 있는 두개의 조건 중 "하나만" 충족해도됨
            - true || true === true
            - false || true === true
            - true || false === true
            - false || false === false



